name: mlops

x-mlops-common:
  &mlops-common
  environment:
    &mlops-common-env
    # Read by JuiceFS as S3 gateway auth
    MINIO_ROOT_USER: ${S3_USER}
    MINIO_ROOT_PASSWORD: ${S3_PASS}
    # Read by AWS CLI to create new buckets
    # Read by MLFlow to store model artifacts
    AWS_ACCESS_KEY_ID: ${S3_USER}
    AWS_SECRET_ACCESS_KEY: ${S3_PASS}
    AWS_ENDPOINT_URL: ${S3_ENDPOINT}

services:
  juicefs:
    <<: *mlops-common
    image: juicedata/mount:latest
    volumes:
      # SQLite database for JuiceFS
      - ./home/juicefs:/home/juicefs
      # JuiceFS file system location
      - ./var/jfs:/var/jfs
    ports:
      # JuiceFS S3 gateway port
      - 9000:9000
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        if [[ ! -d /var/jfs/myjfs ]]; then
          echo "Creating new JuiceFS file system..."
          juicefs format sqlite3:///home/juicefs/myjfs.db myjfs
        fi

        echo "Starting JuiceFS S3 gateway (based on MinIO)..."
        juicefs gateway sqlite3:///home/juicefs/myjfs.db 0.0.0.0:9000 --multi-buckets
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:9000/minio/health/live"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  awscli:
    <<: *mlops-common
    image: amazon/aws-cli:latest
    depends_on:
      juicefs:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        if [[ ! -z $$(aws s3api head-bucket --bucket "${MLFLOW_MODEL_BUCKET_NAME}" 2>&1) ]]; then
          echo "Creating new bucket for storing MLFlow artifacts..."
          aws s3 mb "s3://${MLFLOW_MODEL_BUCKET_NAME}"
        fi

        if [[ ! -z $$(aws s3api head-bucket --bucket "${LAKEFS_DATA_BUCKET_NAME}" 2>&1) ]]; then
          echo "Creating new bucket for storing LakeFS data repos..."
          aws s3 mb "s3://${LAKEFS_DATA_BUCKET_NAME}"
        fi

  mlflow:
    <<: *mlops-common
    image: ghcr.io/mlflow/mlflow:latest
    volumes:
      # SQLite database for MLFlow
      - ./home/mlflow:/home/mlflow
    ports:
      # MLFlow tracking server port
      - 5000:5000
    depends_on:
      juicefs:
        condition: service_healthy
      awscli:
        condition: service_completed_successfully
    entrypoint: ["/bin/bash", "-c"]
    command:
        - |
          echo "Installing Python boto3 dependency..."
          echo "boto3 version between MLFlow server and client must be the same!"
          pip install boto3==1.38.38

          echo "Starting MLFlow UI server..."
          mlflow ui -h 0.0.0.0 -p 5000 \
            --backend-store-uri "sqlite:///home/mlflow/mlruns.db" \
            --default-artifact-root "mlflow-artifacts:/" \
            --artifacts-destination "s3://${MLFLOW_MODEL_BUCKET_NAME}"
            --serve-artifacts
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:5000/health"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # postgres:
  #   image: postgres:latest
  #   environment:
  #     # Set password for the default "postgres" superuser
  #     POSTGRES_PASSWORD: postgres123
  #   volumes:
  #     # Postgres data directory
  #     - ./var/lib/postgresql/data:/var/lib/postgresql/data
  #     # Create new lakeFS user and database
  #     - ./init/lakefs.sql:/docker-entrypoint-initdb.d/lakefs.sql
  #   ports:
  #     # Postgres connection port
  #     - 5432:5432
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "lakefs"]
  #     start_period: 30s
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped
